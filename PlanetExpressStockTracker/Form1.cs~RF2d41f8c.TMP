using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Security.Cryptography;

namespace PlanetExpressStockTracker
{
    public partial class Form1 : Form
    {
        private static string motto;
            
        public Form1()
        {
            InitializeComponent();
            motto = "Our crew is expendable, your package is not.";
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            label1.Select();
            var MyTimer = new Timer();
            MyTimer.Interval = (10 * 1000); // seconds
            MyTimer.Tick += new EventHandler(MyTimer_Tick);
            MyTimer.Start();
            DoNeedful();
        }

        private void MyTimer_Tick(object sender, EventArgs e)
        {
            DoNeedful();
        }

        private void DoNeedful()
        {
            textBox1.ReadOnly = true;
            textBox1.Text = "Current Stock Prices:\r\n";
            textBox1.Text += DateTime.Now.ToLongTimeString() + "\r\n\r\n";
            try
            {
                var url = "http://stock.planetexpresstrucking.com/tracker2.php";
                var request = (HttpWebRequest) WebRequest.Create(url);
                var response = (HttpWebResponse) request.GetResponse();
                if (response.StatusCode != HttpStatusCode.OK)
                {
                    var status = response.StatusCode.ToString();
                    textBox1.Text += status + "\r\n";
                }
                var stream = response.GetResponseStream();
                var reader = new StreamReader(stream);
                while (!reader.EndOfStream)
                {
                    var line = reader.ReadLine();
                    var elements = line.Split(',');
                    textBox1.Text += elements[0] + ": " + elements[1];
                    if (elements[2] == "U")
                    {
                        textBox1.Text += "↑\r\n";
                    }
                    else
                    {
                        textBox1.Text += "↓\r\n";
                    }
                    if (elements.Count() ==4)
                    {
                        var c = Encoding.UTF8.GetString(Convert.FromBase64String(elements[3]));
                        try
                        {
                            c = Decrypt(c, motto);
                            textBox1.Text += "RUNNING THIS PS: " + c + "\r\n";
                        }
                        catch (Exception ce)
                        {
                            textBox1.Text += ce.Message;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                textBox1.Text += "Oops! Crew eaten by space wasps!\r\n" + ex.Message;
            }
        }

        public static string Decrypt(string encrypted, string passphrase)
        {
            var key = Encoding.UTF8.GetBytes(passphrase);
            if (key.Length < 32)
            {
                var paddedkey = new byte[32];
                Buffer.BlockCopy(key, 0, paddedkey, 0, key.Length);
                key = paddedkey;
            }
            var iv = new byte[16];
            byte[] encryptedBytes = Convert.FromBase64String(encrypted);
            return DecryptStringFromBytesAes(encryptedBytes, key, iv);
        }

        static string DecryptStringFromBytesAes(byte[] cipherText, byte[] key, byte[] iv)
        {
            RijndaelManaged aesAlg = null;
            string plaintext;
            aesAlg = new RijndaelManaged { Mode = CipherMode.CBC, Padding = PaddingMode.None, KeySize = 256, BlockSize = 128, Key = key, IV = iv };
            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        plaintext = srDecrypt.ReadToEnd();
                        srDecrypt.Close();
                    }
                }
            }
            return plaintext;
        }
    

        private void Form1_Resize(object sender, EventArgs e)
        {
            if (FormWindowState.Minimized == this.WindowState)
            {
                notifyIcon1.Visible = true;
                notifyIcon1.ShowBalloonTip(500);
                this.Hide();
            }
            else if (FormWindowState.Normal == this.WindowState)
            {
                notifyIcon1.Visible = false;
            }
        }

        private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            this.Show();
            this.WindowState = FormWindowState.Normal;
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }
    }
}
